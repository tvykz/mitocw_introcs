'''
Created on Nov 30, 2020

@author: tylersehon
'''
#===============================================================================
# Problem 3.
# Write a function called constrainedMatchPair() which takes three arguments: a tuple
# representing starting points for the first substring, a tuple representing starting points for the second
# substring, and the length of the first substring. The function should return a tuple of all members (call
# it n) of the first tuple for which there is an element in the second tuple (call it k) such that n+m+1 = k,
# where m is the length of the first substring. Complete the definition
# To test this function, we have provided a function called subStringMatchOneSub, which takes two
# arguments: a target string and a key string. This function will return a tuple of all starting points of
# matches of the key to the target, such that at most one element of the key is incorrectly matched to the
# target. This function is provided for you in the file and invokes the function you are to
# write. 
#===============================================================================

def subStringMatchExact(key, target):
    l1 = [i for i in range(len(target)) if target[i:].find(key) == 0]
    t1 = tuple(l1)
    return t1
    

def subStringMatchOneSub(key, target):
    # search for all locations of key in target, with one substitution
    allAnswers = ()
    for miss in range(0,len(key)):
        # miss picks location for missing element
        # key1 and key2 are substrings to match
        key1 = key[:miss]
        key2 = key[miss+1:]
        print('breaking key',key,'into',key1,key2)
        # match1 and match2 are tuples of locations of start of matches
        # for each substring in target
        match1 = subStringMatchExact(key1, target)
        match2 = subStringMatchExact(key2, target)
        # when we get here, we have two tuples of start points
        # need to filter pairs to decide which are correct
        filtered = constrainedMatchPair(match1,match2,len(key1))
        allAnswers = allAnswers + filtered
        print ('match1',match1)
        print ('match2',match2)
        print ('possible matches for',key1,key2,'start at',filtered)
    return allAnswers
        

def constrainedMatchPair(n, k, m):
    # l1 will be a list that we can manipulate and later convert to a tuple. it will be appended with the values for which there is a match 
    l1 = []
    for loc in range(0, len(n)): #run through indexes of n as loc
        element2 = n[loc] + 1 + m
        
        if element2 in k: # if a value in k (being the starting value of a match for substring2) is 1 and len(substring1) greater than the value of n, then the corresponding match-ups suppose a matchup of the original string 
            l1.append(n[loc]) # add the location of the starting string matchup to a l1

    t1 = tuple(l1) # convert l1 to a tuple
    return t1

key1 = 'atgc'
target1 = 'atgaatgcatggatgtaaatgcag'
print(subStringMatchOneSub(key1, target1))




