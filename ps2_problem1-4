'''
Created on Nov 24, 2020

@author: tylersehon
'''
#===============================================================================
# Show that it is possible to buy exactly 50, 51, 52, 53, 54, and 55 McNuggets, by finding
# solutions to the Diophantine equation. You can solve this in your head, using paper and pencil,
# or writing a program. However you chose to solve this problem, list the combinations of 6, 9
# and 20 packs of McNuggets you need to buy in order to get each of the exact amounts.
#===============================================================================
#===============================================================================
# Assume that the variable packages is bound to a tuple of length 3, the values of which specify
# the sizes of the packages, ordered from smallest to largest. Write a program that uses
# exhaustive search to find the largest number (less than 200) of McNuggets that cannot be
# bought in exact quantity. We limit the number to be less than 200 (although this is an arbitrary
# choice) because in some cases there is no largest value that cannot be bought in exact quantity,
# and we don’t want to search forever. Please use ps2b_template.py to structure your code.
# Have your code print out its result in the following format:
# “Given package sizes <x>, <y>, and <z>, the largest number of McNuggets that
# cannot be bought in exact quantity is: <n>” 
#===============================================================================

sorry = 'Sorry, you cannot get that many nuggets.'

def Biphantine(packsize2, packsize3, n):
    pack1 = packsize2
    pack2 = packsize3
    numpack1 = 0
    numpack2 = 0
    i = 0
    for i in range(i, n):
        if (n - i*pack2) > 0 and (n - i*pack2)%pack1 == 0:
            numpack1 = (n - (i*pack2))//pack1
            numpack2 = i
            break
        elif (n - i*pack1) > 0 and (n - i*pack1)%pack2 == 0:
            numpack2 = (n - (i*pack1))//pack2
            numpack1 = i
            break
    return (numpack1, numpack2)

def Diophantine(ps1, ps2, ps3, n):
    packsize1 = ps1
    packsize2 = ps2
    packsize3 = ps3
    numpacksize1 = 0
    numpacksize2 = 0
    numpacksize3 = 0
    i = 0
    possible = False
    
    for i in range(i, n+1):
        chickens_not_from_packsize1 = n - i*packsize1
        if chickens_not_from_packsize1 == 0:
            numpacksize1 = i
            possible = True
            break 
        
        elif Biphantine(packsize2, packsize3, chickens_not_from_packsize1) != (0, 0):
            cntrl = Biphantine(packsize2, packsize3, chickens_not_from_packsize1)
            numpacksize1 = i
            numpacksize2 = cntrl[0]
            numpacksize3 = cntrl[1]
            possible = True
            break
    
    if possible == True: 
        return ('\nTo get ' + str(n) + ' chicken nuggets, order ' + str(numpacksize1) + ' package(s) of ' + str(packsize1) + ', ' + str(numpacksize2) + ' package(s) of ' + str(packsize2) + ', and ' + str(numpacksize3) + ' package(s) of ' + str(packsize3) + '.') 
    else:
        return sorry

def MaxNullOrder(ps1, ps2, ps3): #calculates the maximum number of nuggets that one cannot order
    i = 0
    nullnugg = 0
    for i in range(i, 100):
        if Diophantine(ps1, ps2, ps3, i) == sorry:
            nullnugg = i
    print('Given pack sizes of ' + str(ps1) + ', ' + str(ps2) + ', ' + str(ps3) + ', the maximum amount of nuggets you cannot order in exact quantity is ' + str(nullnugg))
        

